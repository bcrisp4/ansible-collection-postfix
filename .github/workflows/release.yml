---
name: release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: >-
          python3 -m pip install --upgrade pip &&
          python3 -m pip install -r requirements-release.txt

      - name: Get the tag version
        id: get_tag_version
        run: echo ::set-output name=TAG_VERSION::${GITHUB_REF/refs\/tags\/v/}
      - name: Get the Galaxy metadata version
        id: get_galaxy_version
        run: echo ::set-output name=GALAXY_VERSION::$(yq -r '.version' galaxy.yml)

      - name: Check that version numbers are consistent
        id: check_versions
        run: >-
          [ ${{ steps.get_tag_version.outputs.TAG_VERSION }} =
          ${{ steps.get_galaxy_version.outputs.GALAXY_VERSION }} ]

      - name: Get Changelog Entry
        id: read_changelog
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ steps.get_tag_version.outputs.TAG_VERSION }}
          path: ./CHANGELOG.md


      - name: Build Collection
        run: >-
          ansible --version &&
          ansible-galaxy collection build --force --verbose .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release v${{ steps.get_tag_version.outputs.TAG_VERSION }}
          body: ${{ steps.read_changelog.outputs.changes }}
          prerelease: ${{ steps.read_changelog.outputs.status == 'prereleased' }}
          draft: ${{ steps.read_changelog.outputs.status == 'unreleased' }}

      - name: Upload Release Asset to GitHub
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bcrisp4-postfix-${{ steps.get_tag_version.outputs.TAG_VERSION }}.tar.gz
          asset_name: bcrisp4-postfix-${{ steps.get_tag_version.outputs.TAG_VERSION }}.tar.gz
          asset_content_type: application/gzip
